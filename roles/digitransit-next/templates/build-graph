#! /bin/bash -e

PBF_DOWNLOAD_URL="http://download.geofabrik.de/europe/germany/baden-wuerttemberg-latest.osm.pbf"
PBF_FILE="opentripplanner.osm.pbf"

GTFS_DOWNLOAD_URL="https://gtfs.mfdz.de/hbg.merged.gtfs.zip"

ELEVATION_DOWNLOAD_URL="https://leonard.io/stadtnavi/srtm_38_03.tif"
ELEVATION_FILE="elevation.tif"

IMAGE_NAME="mfdz/opentripplanner:{{ otp_docker_tag }}"

BUILD_DIR=build
OUTPUT_DIR=latest

mkdir -p build
cd build

if [ -f "$PBF_FILE" ]; then
  echo "$PBF_FILE exists. Downloading updates."
  pyosmium-up-to-date -v $PBF_FILE || true
else
  echo "$PBF_FILE does not exist. Downloading ..."
  curl --location -s "${PBF_DOWNLOAD_URL}" -o ${PBF_FILE}
fi

if [ -f "$ELEVATION_FILE" ]; then
  echo "$ELEVATION_FILE exists."
else
  echo "$ELEVATION_FILE does not exist. Downloading ..."
  curl --location -s "${ELEVATION_DOWNLOAD_URL}" -o ${ELEVATION_FILE}
fi


curl -L --fail \
  ${GTFS_DOWNLOAD_URL} \
  -o gtfs.zip

docker pull ${IMAGE_NAME}
docker run \
  -v /var/graph-build/${BUILD_DIR}:/opt/opentripplanner/graph \
  --name graph-build \
  --rm \
  --cpu-shares 512 \
  -e JAVA_OPTS="-Xmx12G" \
  ${IMAGE_NAME} --build --save graph \

cd ..
mkdir -p ${OUTPUT_DIR}
cp ${BUILD_DIR}/graph.obj  ${OUTPUT_DIR}/
cp ${BUILD_DIR}/*.json ${OUTPUT_DIR}

send-to-matrix "üì¶Ô∏è OTP graph build complete on {{ inventory_hostname }}"
